name: Extract plugin URLs and download sgmodule files

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '5,30,55 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat

      - name: Wait for Docker service to be ready
        run: |
          echo "Waiting for Docker service to be ready..."
          for i in {1..10}; do
            nc -z localhost 9101 && break
            sleep 10
          done

      - name: Download README.md
        run: |
          curl -s -o README.md https://raw.githubusercontent.com/luestr/ProxyResource/main/README.md

      - name: Extract .plugin URLs
        run: |
          grep -oP 'https?://[^ )"]+\?plugin=[^ )"]+' README.md > plugin_urls_raw.txt
          grep -oP '(?<=\?plugin=)[^ )"]+' plugin_urls_raw.txt > plugin_urls.txt
          
          # Add fmz200's blockAds plugin with custom name
          echo "https://raw.githubusercontent.com/fmz200/wool_scripts/main/Loon/plugin/blockAds.plugin?rename=Remove_ads_by_fmz" >> plugin_urls.txt

          - name: Process and download sgmodule files
          run: |
            mkdir -p Chores/sgmodule
            
            while read -r plugin_url; do
              # 提取自定义名称
              if [[ "$plugin_url" == *"?rename="* ]]; then
                plugin_name=$(echo "$plugin_url" | grep -oP '(?<=\?rename=)[^&]+')
                plugin_url=$(echo "$plugin_url" | cut -d'?' -f1)
              else
                plugin_name=$(basename "$plugin_url" .plugin)
              fi
              
              # 根据 plugin_name 中的关键词决定 category
              if [[ "$plugin_name" == *"remove_ads"* || "$plugin_name" == *"去广告"* ]]; then
                category="🚫 AD Block"
              elif [[ "$plugin_name" == *"enhance"* || "$plugin_name" == *"增强"* || "$plugin_name" == *"unlock"* || "$plugin_name" == *"解锁"* ]]; then
                category="⚡️ Enhancement"
              elif [[ "$plugin_name" == *"daily_bonus"* || "$plugin_name" == *"签到"* ]]; then
                category="📅 Daily Bonus"
              elif [[ "$plugin_name" == *"converter"* || "$plugin_name" == *"转换"* ]]; then
                category="🔄 Converter"
              else
                category="🔧 Utility"
              fi
  
              encoded_category=$(echo "$category" | jq -sRr @uri)
              encoded_plugin_name=$(echo "$plugin_name" | jq -sRr @uri)
              
              download_url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${encoded_plugin_name}.sgmodule?type=loon-plugin&target=surge-module&del=true&sni=DIRECT%2BREJECT&pm=REJECT%2BREJECT-DROP&category=${encoded_category}"
              
              echo "Downloading from $download_url"
            curl -A "Surge Mac/2985" -L -o "Chores/sgmodule/${plugin_name}.sgmodule" "$download_url" || echo "Failed to download ${plugin_name}.sgmodule"
          done < plugin_urls.txt
  
      - name: Find and replace external JS resources
        continue-on-error: true
        run: |
            base_js_url="https://github.com/hchichi/esdeath/raw/main/Chores/js"
            mkdir -p Chores/js
            for sgmodule_file in Chores/sgmodule/*.sgmodule; do
              echo "Processing $sgmodule_file"
              js_links=$(grep -oP 'https?://[^ ]+\.js' "$sgmodule_file" || echo "")
              for js_link in $js_links; do
                js_filename=$(basename "$js_link")
                local_js_path="Chores/js/$js_filename"
                echo "Downloading $js_link to $local_js_path"
                if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                  echo "Download successful for $js_link"
                  github_js_url="$base_js_url/$js_filename"
                  sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"
                else
                  echo "Failed to download $js_link, skipping..."
                fi
              done
            done
  
      - name: Remove extra blank lines after category lines
        run: |
          for sgmodule_file in Chores/sgmodule/*.sgmodule; do
            sed -i '/^#!category=/ {N;/^\n$/d;}' "$sgmodule_file"
          done
  
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add Chores/sgmodule/*.sgmodule Chores/js/*.js
            if git diff --cached --quiet; then
              echo "No changes to commit"
            else
              git stash
              git pull --rebase
              git stash pop
              git add Chores/sgmodule/*.sgmodule Chores/js/*.js
              git commit -m "Update sgmodule files with GitHub-hosted JS resources"
            git push
            fi
  
      - name: Trigger Deploy Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            event-type: trigger-deploy
  