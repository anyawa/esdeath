name: Generate routing rules for Surge

on:
  workflow_dispatch:
  schedule:
    - cron: '0 23 * * *'
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      RELEASE_NAME: Released on ${{ github.run_number }}
      TAG_NAME: ${{ github.run_number }}
      ipv4_china: https://raw.githubusercontent.com/missuo/ASN-China/main/IP.China.list
      ipv6_china: https://raw.githubusercontent.com/missuo/ASN-China/main/IPv6.China.list
      tiktok_rules: https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Rule/TikTok.list
      streaming_cn: https://github.com/ConnersHua/RuleGo/raw/master/Surge/Ruleset/Extra/Streaming/CN.list
      streaming_not_cn: https://github.com/ConnersHua/RuleGo/raw/master/Surge/Ruleset/Extra/Streaming/!CN.list
      emby_rules: https://github.com/Repcz/Tool/raw/X/Surge/Rules/Emby.list
      ai_rules: https://github.com/Coldvvater/Mononoke/raw/master/Surge/Rules/AI.list
      emby_one: https://github.com/1120109856/lynn/raw/main/fxw
      emby_two: https://github.com/1120109856/lynn/raw/main/zl
      anti_direct: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-direct.list
      anti_proxy: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-proxy.list
      anti_reject: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-reject.list
      qqmusic_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/QQ%E9%9F%B3%E4%B9%90.yaml
      bilibili_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E5%93%94%E5%93%A9%E5%93%A9.yaml
      xiaohongshu_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E5%B0%8F%E7%BA%A2%E4%B9%A6.yaml
      douban_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E8%B1%86%E7%93%A3.yaml
      neteasemusic_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90.yaml
      wechat_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E5%BE%AE%E4%BF%A1.yaml
      douyin_anti: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/rules/%E6%8A%96%E9%9F%B3.yaml
      fenliuxiuzheng_rules: https://github.com/fmz200/wool_scripts/raw/main/QuantumultX/filter/fenliuxiuzheng.list
      ads_fmz200: https://github.com/fmz200/wool_scripts/raw/main/QuantumultX/filter/fenliu.list
      direct_fmz200: https://github.com/fmz200/wool_scripts/raw/main/QuantumultX/filter/fenliuxiuzheng.list

    steps:
      - name: Checkout the default branch
        uses: actions/checkout@v4

      - name: Make directory
        run: |
          mkdir -p Surge/Ruleset/{IPCIDR,Streaming/Video,Streaming,Custom,Anti,NoAds,Anti/Apps,Reject,Direct} dist

      - name: Generate rule files
        run: |
          generate_rule_file() {
            local url=$1
            local output=$2
            local title=$3
            local description=$4
            local extra_processing=$5

            curl -sSL "$url" -o original_rules.list
            rules_count=$(grep -cE "^([0-9a-zA-Z]|#)" original_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")

            cat > "$output" <<EOF
          ################################################
          # $title for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # $description
          #
          # Data from:
          #  - $url
          ################################################

          EOF

            if [ -n "$extra_processing" ]; then
              eval "$extra_processing"
            else
              cat original_rules.list >> "$output"
            fi

            rm original_rules.list
          }

          # New rule generation for Ads_fmz200.list
          generate_rule_file "$ads_fmz200" "Surge/Ruleset/Reject/Reject_fmz200.list" "Ads fmz200 List" "This file contains advertisement-related rules from fmz200, used for Surge rules." '
            rules_count=$(grep -cE "^([0-9a-zA-Z]|#)" original_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
            
            echo "################################################
          # Ads fmz200 List for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # This file contains advertisement-related rules from fmz200.
          #
          # Data from:
          #  - $ads_fmz200
          ################################################
          " > "$output"
            
            sed -e "s/, /,/g" \
                -e "s/;/# /g" \
                -e "s/host,/HOST,/g" \
                -e "s/host-/HOST-/g" \
                -e "s/-suffix/-SUFFIX/g" \
                -e "s/-keyword/-KEYWORD/g" \
                -e "s/ip-cidr/IP-CIDR/g" \
                -e "s/-wildcard/-WILDCARD/g" \
                -e "s/geoip/GEOIP/g" \
                -e "s/HOST,/DOMAIN,/g" \
                -e "s/HOST-/DOMAIN-/g" \
                -e "s/IP6-CIDR,/IP-CIDR6,/g" \
                -e "s/,REJECT$//g" \
                -e "s/,DIRECT$//g" \
                -e "s/,reject$//g" \
                -e "s/,direct$//g" \
                -e "/^#!.*$/d" \
                -e "/^#############################################$/d" \
                -e "s/# >>>>>>>>>>>>>>> ✅ \(.*\) ✅ <<<<<<<<<<<<<<</#\n# --- ( \1 ) ---\n#/" \
                original_rules.list >> "$output"
          '

          # New rule generation for Direct_fmz200.list
          generate_rule_file "$direct_fmz200" "Surge/Ruleset/Direct/Direct_fmz200.list" "Direct fmz200 List" "This file contains direct connection rules from fmz200, used for Surge rules." '
            rules_count=$(grep -cE "^([0-9a-zA-Z]|#)" original_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
            
            echo "################################################
          # Direct fmz200 List for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # This file contains direct connection rules from fmz200.
          #
          # Data from:
          #  - $direct_fmz200
          ################################################
          " > "$output"
            
            sed -e "s/, /,/g" \
                -e "s/;/# /g" \
                -e "s/host,/HOST,/g" \
                -e "s/host-/HOST-/g" \
                -e "s/-suffix/-SUFFIX/g" \
                -e "s/-keyword/-KEYWORD/g" \
                -e "s/ip-cidr/IP-CIDR/g" \
                -e "s/-wildcard/-WILDCARD/g" \
                -e "s/geoip/GEOIP/g" \
                -e "s/HOST,/DOMAIN,/g" \
                -e "s/HOST-/DOMAIN-/g" \
                -e "s/IP6-CIDR,/IP-CIDR6,/g" \
                -e "s/,REJECT$//g" \
                -e "s/,DIRECT$//g" \
                -e "s/,reject$//g" \
                -e "s/,direct$//g" \
                -e "/^#!.*$/d" \
                -e "/^#############################################$/d" \
                -e "s/# >>>>>>>>>>>>>>> ✅ \(.*\) ✅ <<<<<<<<<<<<<<</#\n# --- ( \1 ) ---\n#/" \
                original_rules.list >> "$output"
          '

      - name: Generate EmbyBravo.list file
        run: |
          process_file() {
            awk '{
              if ($0 ~ /^#/) {
                sub(/^#/, "# > ")
                print toupper($0)
              } else if ($0 ~ /^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|IP-CIDR|IP-CIDRUSER-AGENT|URL-REGEX)/) {
                if ($0 ~ /^(IP-CIDR|IP-CIDR6)/ && !/no-resolve$/) {
                  print $0 ",no-resolve"
                } else {
                  print
                }
                print ""
              }
            }' "$1" > "$2"
          }

          curl -sSL "$emby_one" -o list1.raw
          curl -sSL "$emby_two" -o list2.raw

          process_file list1.raw list1.processed
          echo -e "\n# --- --- ---(2nd)--- --- --- \n" > list2.processed
          process_file list2.raw list2.processed

          cat list1.processed list2.processed > Surge/Ruleset/Streaming/Video/EmbyBravo.list

          count_rules() {
            grep -cE "^$1" Surge/Ruleset/Streaming/Video/EmbyBravo.list || echo 0
          }

          domain_keyword_count=$(count_rules "DOMAIN-KEYWORD")
          domain_suffix_count=$(count_rules "DOMAIN-SUFFIX")
          ip_cidr_count=$(count_rules "IP-CIDR")
          ip_cidr6_count=$(count_rules "IP-CIDR6")
          user_agent_count=$(count_rules "USER-AGENT")
          url_regex_count=$(count_rules "URL-REGEX")
          total_count=$((domain_keyword_count + domain_suffix_count + ip_cidr_count + ip_cidr6_count + user_agent_count + url_regex_count))

          header="################################################\n"
          header+="# Emby Server Rules for Surge\n# \n"
          header+="# Last Updated: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")\n#\n"
          [ "$domain_keyword_count" -ne 0 ] && header+="# DOMAIN-KEYWORD: $domain_keyword_count\n"
          [ "$domain_suffix_count" -ne 0 ] && header+="# DOMAIN-SUFFIX: $domain_suffix_count\n"
          [ "$ip_cidr_count" -ne 0 ] && header+="# IP-CIDR: $ip_cidr_count\n"
          [ "$ip_cidr6_count" -ne 0 ] && header+="# IP-CIDR6: $ip_cidr6_count\n"
          [ "$user_agent_count" -ne 0 ] && header+="# USER-AGENT: $user_agent_count\n"
          [ "$url_regex_count" -ne 0 ] && header+="# URL-REGEX: $url_regex_count\n"
          header+="# TOTAL: $total_count\n#\n"
          header+="# This file contains domain and IP rules from multiple sources, used for Surge rules.\n"
          header+="################################################\n\n"

          echo -e "$header" | cat - Surge/Ruleset/Streaming/Video/EmbyBravo.list > temp && mv temp Surge/Ruleset/Streaming/Video/EmbyBravo.list

          rm list1.raw list2.raw list1.processed list2.processed

      - name: Generate Anti rule files
        run: |
          generate_anti_file() {
            local url=$1
            local output=$2
            local title=$3
            local description=$4

            curl -sSL "$url" -o original_rules.list
            grep -E "^(DOMAIN-SUFFIX|DOMAIN|IP-CIDR|DOMAIN-KEYWORD|IP-CIDR6)," original_rules.list > filtered_rules.list
            rules_count=$(wc -l < filtered_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")

            cat > "$output" <<EOF
          ################################################
          # $title for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # $description
          #
          # Data from:
          #  - $url
          ################################################

          EOF

            cat filtered_rules.list >> "$output"
            rm original_rules.list filtered_rules.list
          }

          generate_anti_file "$anti_direct" "Surge/Ruleset/Anti/Direct.list" "Anti Direct List" "本文件包含反 IP 归属地检测的直连规则,用于 Surge 规则。"
          generate_anti_file "$anti_proxy" "Surge/Ruleset/Anti/Proxy.list" "Anti Proxy List" "本文件包含反 IP 归属地检测的代理规则,用于 Surge 规则。"
          generate_anti_file "$anti_reject" "Surge/Ruleset/Anti/Reject.list" "Anti Reject List" "本文件包含反 IP 归属地检测的拒绝规则,用于 Surge 规则。"

      - name: Generate Anti Apps rule files
        run: |
          generate_anti_byapps_file() {
            local url=$1
            local output=$2
            local title=$3
            local description=$4
          
            echo "Downloading rules from $url..."
            curl -sSL "$url" -o original_rules.yaml || { echo "Failed to download $url"; exit 1; }
          
            echo "Downloaded rules:"
            cat original_rules.yaml
            
            # 直接处理原始文件，提取规则
            sed -n '/^    - /p' original_rules.yaml | \
              sed 's/^    - //' | \
              grep -E '^(DOMAIN|DOMAIN-SUFFIX|IP-CIDR|DOMAIN-KEYWORD|IP-CIDR6),' | \
              awk '{
                if ($0 ~ /,(REJECT|DIRECT)/) {
                  if ($0 !~ /^#/) {
                    print "# " $0
                  } else {
                    print $0
                  }
                } else if ($0 ~ /^(IP-CIDR|IP-CIDR6),/) {
                  if ($0 ~ /#/) {
                    sub(/#/, ",no-resolve #")
                    print $0
                  } else if (!/,no-resolve$/) {
                    print $0 ",no-resolve"
                  } else {
                    print $0
                  }
                } else {
                  print $0
                }
              }' > filtered_rules.list
            
            echo "Filtered rules:"
            cat filtered_rules.list
            
            rules_count=$(grep -v '^#' filtered_rules.list | wc -l)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          
            cat > "$output" <<EOF
          ################################################
          # $title for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # $description
          #
          # Data from:
          #  - $url
          ################################################
          
          EOF
          
            cat filtered_rules.list >> "$output"
          
            echo "Generated rules file:"
            cat "$output"
          
            rm original_rules.yaml filtered_rules.list
          }
                      generate_anti_byapps_file "$qqmusic_anti" "Surge/Ruleset/Anti/Apps/QQMusic.list" "Anti QQ Music List" "本文件包含反 QQ 音乐 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$bilibili_anti" "Surge/Ruleset/Anti/Apps/Bilibili.list" "Anti Bilibili List" "本文件包含反哔哩哔哩 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$xiaohongshu_anti" "Surge/Ruleset/Anti/Apps/Xiaohongshu.list" "Anti Xiaohongshu List" "本文件包含反小红书 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$douban_anti" "Surge/Ruleset/Anti/Apps/Douban.list" "Anti Douban List" "本文件包含反豆瓣 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$neteasemusic_anti" "Surge/Ruleset/Anti/Apps/NeteaseMusic.list" "Anti Netease Music List" "本文件包含反网易云音乐 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$wechat_anti" "Surge/Ruleset/Anti/Apps/WeChat.list" "Anti WeChat List" "本文件包含反微信 IP 归属地检测的代理规则,用于 Surge 规则。"
                      generate_anti_byapps_file "$douyin_anti" "Surge/Ruleset/Anti/Apps/Douyin.list" "Anti Douyin List" "本文件包含反抖音 IP 归属地检测的代理规则,用于 Surge 规则。"

      - name: Commit and Push
        run: |
          git config --global user.name "the Magical Cat"
          git config --global user.email "theMagicalCat@users.noreply.github.com"
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')" && git push origin HEAD)
          
      - name: Purge jsdelivr CDN
        run: |
          cdn_files=(
            "Surge/Ruleset/IPCIDR/IPv4.China.list"
            "Surge/Ruleset/IPCIDR/IPv6.China.list"
            "Surge/Ruleset/Streaming/Video/TikTok.list"
            "Surge/Ruleset/Streaming/CN.list"
            "Surge/Ruleset/Streaming/!CN.list"
            "Surge/Ruleset/Streaming/Video/Emby.list"
            "Surge/Ruleset/Streaming/Video/EmbyBravo.list"
            "Surge/Ruleset/AI.list"
            "Surge/Ruleset/Anti/Direct.list"
            "Surge/Ruleset/Anti/Proxy.list"
            "Surge/Ruleset/Anti/Reject.list"
            "Surge/Ruleset/Anti/Apps/QQMusic.list"
            "Surge/Ruleset/Anti/Apps/Bilibili.list"
            "Surge/Ruleset/Anti/Apps/Xiaohongshu.list"
            "Surge/Ruleset/Anti/Apps/Douban.list"
            "Surge/Ruleset/Anti/Apps/NeteaseMusic.list"
            "Surge/Ruleset/Anti/Apps/WeChat.list"
            "Surge/Ruleset/Anti/Apps/Douyin.list"
            "Surge/Ruleset/Reject/Reject_fmz200.list"
            "Surge/Ruleset/Direct/Direct_fmz200.list"
          )

          for file in "${cdn_files[@]}"; do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}/$file"
          done